using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using AnythinkSolutions.Wpf.Common.Helpers;

namespace AnythinkSolutions.Wpf.Common.Behaviors
{
	/// <summary>
	/// This is a behavior that can be applied to an ItemsControl and will allow for drag and drop within the items control.
	/// It should also support dragn and drop between different items controls (in the same window), however that has not been tested
	/// or verified.  Also, there is work to be done to deal with adorners, etc. so that we can have a more visually appealing
	/// drag and drop experience.
	/// </summary>
	public class DragDropBehavior
	{
		#region Member Variables

		private static DragDropBehavior _singleton;
		private const string _formatName = "DragDropItem";

		private DragDropArguments _arguments;

		private Window _topWindow;
		private ItemsControl _sourceContainer;
		private Point _startMousePosition;
		private FrameworkElement _sourceItem;

		private ItemsControl _targetContainer;
		private FrameworkElement _targetItem;

		private object _data;

		#endregion

		#region Properties

		/// <summary>
		/// Property to get the singleton instance of this behavior.
		/// </summary>
		private static DragDropBehavior Singleton
		{
			get
			{
				if (_singleton == null)
				{
					_singleton = new DragDropBehavior();
				}

				return _singleton;
			}
		}

		#endregion

		#region AllowDragSource Attached Property

		public static readonly DependencyProperty AllowDragSourceProperty = DependencyProperty.RegisterAttached("AllowDragSource", typeof(bool), typeof(DragDropBehavior), new UIPropertyMetadata(false, AllowDragSourceChanged));

		/// <summary>
		/// Handles the Changed event of the AllowDragSource attached property.  Will wire/unwire the events to allow
		/// us to listen for dragging-related activities.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private static void AllowDragSourceChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
		{
			ItemsControl panel = sender as ItemsControl;
			if (panel != null)
			{
				if (Object.Equals(true, e.NewValue))
				{
					//Wire up to listen for the proper mouse events so we know when a drag starts
					panel.PreviewMouseLeftButtonDown += Singleton.DragSource_PreviewMouseLeftButtonDown;
					panel.PreviewMouseMove += Singleton.DragSource_PreviewMouseMove;
					panel.PreviewMouseLeftButtonUp += Singleton.DragSource_PreviewMouseLeftButtonUp;
				}
				else
				{
					//Unwire the events so we're no longer listening
					panel.PreviewMouseLeftButtonDown -= Singleton.DragSource_PreviewMouseLeftButtonDown;
					panel.PreviewMouseMove -= Singleton.DragSource_PreviewMouseMove;
					panel.PreviewMouseLeftButtonUp -= Singleton.DragSource_PreviewMouseLeftButtonUp;
				}
			}
		}

		public static bool GetAllowDragSource(DependencyObject obj)
		{
			return (bool)obj.GetValue(AllowDragSourceProperty);
		}
		public static void SetAllowDragSource(DependencyObject obj, bool value)
		{
			obj.SetValue(AllowDragSourceProperty, value);
		}
		#endregion

		#region AllowDropoTarget Attached Property

		public static readonly DependencyProperty AllowDropTargetProperty = DependencyProperty.RegisterAttached("AllowDropTarget", typeof(bool), typeof(DragDropBehavior), new UIPropertyMetadata(false, AllowDropTargetChanged));

		/// <summary>
		/// Handles the changed event of the AllowDropTarget attached property.  Will wire/unwire the necessary events to the sender
		/// for handling the drop-related activities.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private static void AllowDropTargetChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
		{
			ItemsControl panel = sender as ItemsControl;		//For now, we're only doing this with items controls
			if (panel != null)
			{
				if (object.Equals(true, e.NewValue))
				{
					panel.AllowDrop = true;
					panel.PreviewDrop += Singleton.DropTarget_PreviewDrop;
					panel.PreviewDragEnter += Singleton.DropTarget_PreviewDragEnter;
					panel.PreviewDragOver += Singleton.DropTarget_PreviewDragOver;
					panel.PreviewDragLeave += Singleton.DropTarget_PreviewDragLeave;
				}
				else
				{
					panel.AllowDrop = false;
					panel.PreviewDrop -= Singleton.DropTarget_PreviewDrop;
					panel.PreviewDragEnter -= Singleton.DropTarget_PreviewDragEnter;
					panel.PreviewDragOver -= Singleton.DropTarget_PreviewDragOver;
					panel.PreviewDragLeave -= Singleton.DropTarget_PreviewDragLeave;
				}
			}
		}

		public static bool GetAllowDropTarget(DependencyObject obj)
		{
			return (bool)obj.GetValue(AllowDropTargetProperty);
		}
		public static void SetAllowDropTarget(DependencyObject obj, bool value)
		{
			obj.SetValue(AllowDropTargetProperty, value);
		}

		#endregion

		#region DropHandler Attached Property

		public static readonly DependencyProperty DropHandlerProperty = DependencyProperty.RegisterAttached("DropHandler", typeof(IDropHandler), typeof(DragDropBehavior));
		public static void SetDropHandler(DependencyObject obj, IDropHandler value)
		{
			obj.SetValue(DropHandlerProperty, value);
		}
		public static IDropHandler GetDropHandler(DependencyObject obj)
		{
			return (IDropHandler)obj.GetValue(DropHandlerProperty);
		}

		#endregion

		#region DragHandler Attached Property

		public static readonly DependencyProperty DragHandlerProperty = DependencyProperty.RegisterAttached("DragHandler", typeof(IDragHandler), typeof(DragDropBehavior));
		public static void SetDragHandler(DependencyObject obj, IDragHandler value)
		{
			obj.SetValue(DragHandlerProperty, value);
		}
		public static IDragHandler GetDragHandler(DependencyObject obj)
		{
			return (IDragHandler)obj.GetValue(DragHandlerProperty);
		}

		#endregion

		#region Instance Methods

		#region Drag event handlers

		/// <summary>
		/// Handles the reviewMouseLeftButtonDown to capture the information necessary for dragging, if it occurs
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void DragSource_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
		{
			Visual sourceVisual = e.OriginalSource as Visual;
			_topWindow = sourceVisual.FindAncestor<Window>();
			_startMousePosition = e.GetPosition(_topWindow);
			
			_sourceContainer = sender as ItemsControl;
			_sourceItem = VisualTreeHelperEx.FindItemContainer(_sourceContainer, sourceVisual);

			_arguments = new DragDropArguments() { DragContainer = _sourceContainer, DragElement = _sourceItem };

			IDragHandler handler = GetDragHandler(_sourceContainer);

			if (_sourceItem != null && (handler == null || handler.CanDrag(_arguments)))
			{
				_data = _sourceItem.DataContext;
			}			
		}

		private void DragSource_PreviewMouseMove(object sender, MouseEventArgs e)
		{
			if (_data != null && IsMouseMoveEnoughToBeginDrag(_startMousePosition, e.GetPosition(_topWindow)))
			{
				DataObject data = new DataObject(_formatName, _data);
				
				//Make sure the drag adorner still shows over the window
				//bool previousAllowDropValue = ChangeWindowAllowDrop(null);

				DragDropEffects effects = DragDrop.DoDragDrop((DependencyObject)sender, data, DragDropEffects.Move);

				//ChangeWindowAllowDrop(previousAllowDropValue);
				_data = null;
			}
		}

		private void DragSource_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
		{
			_data = null;
		}

		/// <summary>
		/// Checks whether or not the user moved the mouse enough to start a Drag operation
		/// </summary>
		/// <param name="startPoint">The point where the MouseDown occurred</param>
		/// <param name="currentPoint">The current position of the mouse</param>
		/// <returns></returns>
		private bool IsMouseMoveEnoughToBeginDrag(Point startPoint, Point currentPoint)
		{
			return (Math.Abs(currentPoint.X - startPoint.X) >= SystemParameters.MinimumHorizontalDragDistance ||
					Math.Abs(currentPoint.Y - startPoint.Y) >= SystemParameters.MinimumVerticalDragDistance);
		}

		//private bool ChangeWindowAllowDrop(bool? previousValue)
		//{
		//    if (previousValue == null)
		//    {
		//        //Setting the value, so need to wire up the appropriate events
		//        bool winValue = _topWindow.AllowDrop;
		//        _topWindow.AllowDrop = true;
		//        _topWindow.DragEnter += Window_DragEnter;
		//        _topWindow.DragOver += Window_DragOver;
		//        _topWindow.DragLeave += Window_DragLeave;
		//        return winValue;
		//    }
		//    else
		//    {
		//        _topWindow.AllowDrop = previousValue.GetValueOrDefault();
		//        _topWindow.DragEnter -= Window_DragEnter;
		//        _topWindow.DragOver -= Window_DragOver;
		//        _topWindow.DragLeave -= Window_DragLeave;
		//        return previousValue.GetValueOrDefault();		
		//    }
		//}

		#endregion

		#region Drop event handlers

		private void DropTarget_PreviewDrop(object sender, DragEventArgs e)
		{
			object draggedData = e.Data.GetData(_formatName);

			//Only handling movement within the same container at this point.
			if (draggedData != null && _targetContainer != null && _sourceContainer == _targetContainer)
			{
				_arguments.DropElement = _targetItem; _arguments.DropContainer = _targetContainer;

				IDropHandler dropHandler = GetDropHandler(_targetContainer);
				if (dropHandler != null && dropHandler.CanDrop(_arguments))
				{
					dropHandler.Drop(_arguments);
				}
			}
		}

		private void DropTarget_PreviewDragEnter(object sender, DragEventArgs e)
		{
			_targetContainer = sender as ItemsControl;
			_targetItem = VisualTreeHelperEx.FindItemContainer(_targetContainer, ((Visual)e.OriginalSource));
		}

		private void DropTarget_PreviewDragOver(object sender, DragEventArgs e)
		{
		}

		private void DropTarget_PreviewDragLeave(object sender, DragEventArgs e)
		{
		}

		#endregion

		#endregion

	}

	

}
