using System;
using System.Collections.Generic;
using System.Text;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Windows.Data;
using System.Collections;

namespace AnythinkSolutions.Wpf.Common
{
	//public class XamCollectionView : IEnumerable, INotifyCollectionChanged
	//{
	//    private ICollectionView _sourceItems;
	//    private readonly NotifyCollectionChangedEventArgs _eventArgs = new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset);

	//    public XamCollectionView(ICollectionView sourceItems)
	//    {
	//        _sourceItems = sourceItems;
	//        _sourceItems.CollectionChanged += delegate { this.RaiseCollectionChanged(); };
	//    }

	//    public void RaiseCollectionChanged()
	//    {
	//        if (this.CollectionChanged != null)
	//            this.CollectionChanged(this, _eventArgs);
	//    }

	//    #region INotifyCollectionChanged Members

	//    public event NotifyCollectionChangedEventHandler CollectionChanged;

	//    #endregion

	//    #region IEnumerable Members

	//    public IEnumerator GetEnumerator()
	//    {
	//        return _sourceItems.GetEnumerator();
	//    }

	//    #endregion

	//    #region Properties

	//    /// <summary>
	//    /// Gets the source collection for this wrapper
	//    /// </summary>
	//    public ICollectionView SourceCollection
	//    {
	//        get { return _sourceItems; }
	//    }

	//    #endregion

	//}

	/// <summary>
	/// An observable colleciton class that will allow for sorting and searching.
	/// </summary>
	/// <typeparam name="T"></typeparam>
	public class SortableObservableCollection<T> : ObservableCollection<T>//, IList<T>
	{
		//private XamCollectionView _collView;

		#region Constructors

		/// <summary>
		/// Default Constructor
		/// </summary>
		public SortableObservableCollection() : base() 
		{
		}
		
		/// <summary>
		/// Constructor taking a list of items to initialize the list with.
		/// </summary>
		/// <param name="items"></param>
		public SortableObservableCollection(IEnumerable<T> items) : base(items) 
		{
		}
		
		#endregion

		//public XamCollectionView GetCollectionView()
		//{
		//    if (_collView == null)
		//        _collView = new XamCollectionView(CollectionViewSource.GetDefaultView(this));

		//    return _collView;
		//}


		private void RaiseCollectionChanged()
		{
			
				
		}

		/// <summary>
		/// Sorts the collection using the default comparer
		/// </summary>
		public void Sort()
		{
			Sort(Comparer<T>.Default);
		}

		/// <summary>
		/// Sorts the collection using a specific comparer
		/// </summary>
		/// <param name="comparer"></param>
		public void Sort(IComparer<T> comparer)
		{
			int i, j;
			T index;

			for (i = 1; i < Count; i++)
			{
				index = this[i];
				j = i;
				while ((j > 0) && (comparer.Compare(this[j - 1], index) == 1))
				{
					this[j] = this[j - 1];
					j = j - 1;
				}
				this[j] = index;
			}
		}

		/// <summary>
		/// Sorts the collection using a predicate 
		/// </summary>
		/// <param name="comparer"></param>
		public void Sort(Func<T, T, int> comparer)
		{
			int i, j;
			T index;

			for (i = 1; i < Count; i++)
			{
				index = this[i];
				j = i;
				while ((j > 0) && (comparer(this[j - 1], index) == 1))
				{
					this[j] = this[j - 1];
					j = j - 1;
				}
				this[j] = index;
			}
		}

		/// <summary>
		/// Finds an item in the collection
		/// </summary>
		/// <param name="predicate"></param>
		/// <returns></returns>
		public T Find(Predicate<T> predicate)
		{
			foreach (T item in this)
			{
				if (predicate(item))
					return item;
			}

			return default(T);
		}

		/// <summary>
		/// Finds all the items in the collection based on the predicate, and returns a list of items
		/// </summary>
		/// <param name="predicate"></param>
		/// <returns></returns>
		public List<T> FindAll(Predicate<T> predicate)
		{
			List<T> results = new List<T>();
			foreach (T item in this)
			{
				if (predicate(item))
					results.Add(item);
			}

			return results;
		}

		/// <summary>
		/// Enumerates the items in the collection and performs the specified action on each one.
		/// </summary>
		/// <param name="action"></param>
		public void ForEach(Action<T> action)
		{
			foreach (T item in this)
				action(item);
		}

		/// <summary>
		/// Adds a range of items to the collection
		/// </summary>
		/// <param name="items"></param>
		public void AddRange(IEnumerable<T> items)
		{
			foreach (T item in items)
				base.Add(item);

			//OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, items));

		}

		//#region IList<T> Members

		//int IList<T>.IndexOf(T item)
		//{
		//    return base.IndexOf(item);
		//}

		//void IList<T>.Insert(int index, T item)
		//{
		//    base.Insert(index, item);
		//}

		//void IList<T>.RemoveAt(int index)
		//{
		//    base.RemoveAt(index);
		//}

		//T IList<T>.this[int index]
		//{
		//    get
		//    {
		//        return base[index];
		//    }
		//    set
		//    {
		//        base[index] = value;
		//    }
		//}

		//#endregion

		//#region ICollection<T> Members

		//void ICollection<T>.Add(T item)
		//{
		//    base.Add(item);
		//}

		//void ICollection<T>.Clear()
		//{
		//    base.Clear();
		//}

		//bool ICollection<T>.Contains(T item)
		//{
		//    return base.Contains(item);
		//}

		//void ICollection<T>.CopyTo(T[] array, int arrayIndex)
		//{
		//    base.CopyTo(array, arrayIndex);
		//}

		//int ICollection<T>.Count
		//{
		//    get { return base.Count; }
		//}

		//bool ICollection<T>.IsReadOnly
		//{
		//    get { return true; }
		//}

		//bool ICollection<T>.Remove(T item)
		//{
		//    return base.Remove(item);
		//}

		//#endregion

		//#region IEnumerable<T> Members

		//IEnumerator<T> IEnumerable<T>.GetEnumerator()
		//{
		//    return base.GetEnumerator();
		//}

		//#endregion

		//#region IEnumerable Members

		//System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		//{
		//    return base.GetEnumerator();
		//}

		//#endregion
	}
}
